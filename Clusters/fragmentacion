// Configuracion previa del cluster
sudo nano / etc / mongod - fragmentacion.conf

# Cluster fragmentacion server
storage:
dbPath: /var/lib / data / fragmentacion - cluster
systemLog:
destination: file
logAppend: true
path: /var/log / mongodb / mongo - fragmentacion.log
net:
port: 27025
bindIpAll: true
processManagement:
timeZoneInfo: /usr/share / zoneinfo
replication:
replSetName: "fragmentacion"
sharding:
clusterRole: fragmentacionsvr
// crear los directorios para la configuracion del cluster
sudo mkdir - p /var/lib/data / fragmentacion - cluster
sudo chown mongodb: mongodb /var/lib/data / fragmentacion - cluster
sudo mkdir - p /var/log/mongodb
sudo chown mongodb: mongodb /var/log/mongodb

sudo / usr / bin / mongod--fork--fragmentacion / etc / mongod - fragmentacion.conf
// conectarse a mongo
mongosh--port 27025
// iniciar conjunto de replicacion
rs.initiate({
    _id: "fragmentacion",
    configsvr: true,
    members: [{ _id: 0, host: "localhost:27025" }]
})
// crear la configuracion de cada shard
// shard1
sudo nano / etc / mongo - shard1.conf
# MongoDB replica set for shard - 1
storage:
    dbPath: /var/lib / data / shard1
systemLog:
destination: file
logAppend: true
path: /var/log / mongodb / mongo - shard1.log
net:
port: 27023
bindIpAll: true
processManagement:
timeZoneInfo: /usr/share / zoneinfo
replication:
replSetName: "shard-1"
sharding:
clusterRole: shardsvr
// crear carpeta para shard y dar permisos
sudo mkdir - p /var/lib/data / shard1
sudo chown mongodb: mongodb /var/lib/data / shard1
sudo mkdir - p /var/log/mongodb
sudo chown mongodb: mongodb /var/log/mongodb
// iniciar servidor de shard1
sudo / usr / bin / mongod--fork--fragmentacion / etc / mongo - shard1.conf
// conectarse a mongo
rs.initiate({
    _id: "shard-1",
    members: [{ _id: 0, host: "localhost:27023" }]
})
// shard2
sudo nano / etc / mongo - shard2.conf
# MongoDB replica set for shard - 2
storage:
    dbPath: /var/lib / data / shard2
systemLog:
destination: file
logAppend: true
path: /var/log / mongodb / mongo - shard2.log
net:
port: 27024
bindIpAll: true
processManagement:
timeZoneInfo: /usr/share / zoneinfo
replication:
replSetName: "shard-2"
sharding:
clusterRole: shardsvr
// crear carpeta para shard y dar permisos
sudo mkdir - p /var/lib/data / shard2
sudo chown mongodb: mongodb /var/lib/data / shard2
sudo mkdir - p /var/log/mongodb
sudo chown mongodb: mongodb /var/log/mongodb
// iniciar servidor de shard1
sudo / usr / bin / mongod--fork--fragmentacion / etc / mongo - shard2.conf
// conectarse a mongo
rs.initiate({
    _id: "shard-2",
    members: [{ _id: 0, host: "localhost:27024" }]
})

// configurar cluster fragmentado
// sustituir mongoDB por mongos
sudo systemctl stop mongod
sudo systemctl disable mongod
// lanzar servidor de enrutamiento
sudo mongos--fork--syslog--bind_ip_all--port 27017 --configdb fragmentacion / localhost: 27025
// conectarse a mongosh
mongosh--port 27017
// agregar shards
//Agregar shard-1 (puerto 27023):
sh.addShard("shard-1/localhost:27023")
//Agregar shard-2 (puerto 27024):
sh.addShard("shard-2/localhost:27024")


// Dise√±o del cluster
use GameSystem;
// Crear un indice para cada coleccion


// Juegos
// crear un indice de tipo hashed para ID
db.createCollection("Juegos")
db.Juegos.createIndex({ "id": "hashed" })
sh.shardCollection("GameSystem.Juegos", { "id": "hashed" })
// Areas
// crear un indice de tipo hashed para ID
db.createCollection("Areas")
db.Areas.createIndex({ "id": "hashed" })
sh.shardCollection("GameSystem.Areas", { "id": "hashed" })
// IncidenteSeguridad
// crear un indice de tipo hashed para ID
db.createCollection("IncidenteSeguridad")
db.IncidenteSeguridad.createIndex({ "id": "hashed" })
sh.shardCollection("GameSystem.IncidenteSeguridad", { "id": "hashed" })
// EncuestaSatisfaccion
// crear un indice de tipo hashed para ID
db.createCollection("EncuestaSatisfaccion")
db.EncuestaSatisfaccion.createIndex({ "id": "hashed" })
sh.shardCollection("GameSystem.EncuestaSatisfaccion", { "id": "hashed" })
// EncuestaSatisfaccion
// crear un indice de tipo hashed para ID
db.createCollection("EncuestaSatisfaccion")
db.EncuestaSatisfaccion.createIndex({ "id": "hashed" })
sh.shardCollection("GameSystem.EncuestaSatisfaccion", { "id": "hashed" })
// RegistroClima
// crear un indice de tipo hashed para ID
db.createCollection("RegistroClima")
db.RegistroClima.createIndex({ "id": "hashed" })
sh.shardCollection("GameSystem.RegistroClima", { "id": "hashed" })
// Incidencia
// crear un indice de tipo hashed para ID
db.createCollection("Incidencia")
db.Incidencia.createIndex({ "id": "hashed" })
sh.shardCollection("GameSystem.Incidencia", { "id": "hashed" })
// Usuario
// crear un indice de tipo hashed para NIF
db.createCollection("Usuario")
db.Usuario.createIndex({ "NIF": "hashed" })
sh.shardCollection("GameSystem.Usuario", { "NIF": "hashed" })
// Mantenimiento
// crear un indice de tipo hashed para ID
db.createCollection("Mantenimiento")
db.Mantenimiento.createIndex({ "id": "hashed" })
sh.shardCollection("GameSystem.Mantenimiento", { "id": "hashed" })

